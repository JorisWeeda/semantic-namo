#!/usr/bin/env python3
from control.mppi_isaac.mppiisaac.planner.isaacgym_wrapper import ActorWrapper  # type: ignore

import os
import csv
import copy
import time
import rospy
import hydra
import torch
import datetime
import numpy as np
import matplotlib.pyplot as plt

import shapely
from shapely.affinity import rotate
from tf.transformations import euler_from_quaternion

from matplotlib.patches import Polygon

from environment import SimulateWorld
from scheduler import Scheduler


class Experiment1:

    DATA_FOLDER = 'tu_delft_ws/15_msc_thesis/experiment_1/'
    
    MAX_EXEC_DURATION = 150
    ROOM_ITERATONS = 20
   
    DIMENSION_ROOM_X = 2.
    DIMENSION_ROOM_Y = 6.

    USE_NVG = True
    USE_SVG = True
    USE_PRM = False
    USE_RRT = True

    RUN_SIM = True
    SAVE_IMG = False

    def __init__(self, gym_world, scheduler, layout, config, file_path):
        self.gym_world = gym_world
        self.scheduler = scheduler
        self.file_path = file_path

        self.config = config
        self.layout = layout

        self.device = self.gym_world.device

    @classmethod
    def create_benchmark_experiment_1(cls):
        rospy.init_node('experiment_1_node')

        hydra.initialize(config_path="../config", version_base=None)

        config = rospy.get_param('~config')
        layout = rospy.get_param('~layout')

        gym_world = SimulateWorld.create(hydra.compose(config), layout, False)
        scheduler = Scheduler.create_scheduler(layout)

        data_folder = os.path.join(os.path.expanduser('~'), cls.DATA_FOLDER)
        os.makedirs(data_folder, exist_ok=True)

        file_name = f"experiment_1_{datetime.datetime.now().strftime('%Y-%m-%d')}.csv"
        file_path = os.path.join(data_folder, file_name)

        return cls(gym_world, scheduler, layout, config, file_path)

    def run_experiment_1(self):
        rospy.loginfo(f'Running experiment 1')

        for _ in range(self.ROOM_ITERATONS):
            configurations = {'ID': [],
                            'experiment': [],
                            'room_area': [],
                            'planner': [],
                            'planner_result': [],
                            'planner_time': [],
                            'planner_cost': [],
                            'runner': [],
                            'runner_result': [],
                            'runner_force': [],
                            'runner_time': []
                            }

            self.apply_sequence(self.DIMENSION_ROOM_X, self.DIMENSION_ROOM_Y, configurations)
        rospy.loginfo(f'Finished experiment 1')

    def apply_sequence(self, x, y, configurations):
        rospy.loginfo(f'Creating environment x:{x} y:{y}')
        additions, actors, room_area = self.initiate_world(x, y)
        self.reset_robot()

        robot_dof = self.gym_world.get_robot_dofs()
        q_init = (robot_dof[0], robot_dof[2])
        q_goal = self.scheduler.robot_goal_pos

        name = datetime.datetime.now().strftime('%Y%m%d%H%M%S%f')

        if rospy.is_shutdown():
            return

        nvg_graph, nvg_path = None, None
        if self.USE_NVG:
            rospy.loginfo(f'Running NVG global planner on environment.')
            nvg_result, nvg_graph, nvg_time, nvg_path, nvg_cost = self.run_path_planner(actors, 'nvg')

            configurations["ID"].append(f"{name}")
            configurations["room_area"].append(room_area)
            configurations["experiment"].append(1)

            configurations["planner"].append('nvg') 
            configurations["planner_result"].append(nvg_result)
            configurations["planner_time"].append(nvg_time)
            configurations["planner_cost"].append(nvg_cost)

            run_nvg_result, run_nvg_force, run_nvg_time = False, 0., 0.
            if self.RUN_SIM:
                rospy.loginfo(f'Executing NVG path in environment.')
                run_nvg_result, run_nvg_time, run_nvg_force = self.run_trajectory(nvg_result, additions)

            configurations["runner"].append('mppi') 
            configurations["runner_result"].append(run_nvg_result)
            configurations["runner_force"].append(run_nvg_force)
            configurations["runner_time"].append(run_nvg_time)

        if rospy.is_shutdown():
            return

        svg_graph, svg_path = None, None
        if self.USE_SVG:
            rospy.loginfo(f'Running SVG global planner on environment.')
            svg_result, svg_graph, svg_time, svg_path, svg_cost = self.run_path_planner(actors, 'svg')

            configurations["ID"].append(f"{name}")
            configurations["room_area"].append(room_area)
            configurations["experiment"].append(1)

            configurations["planner"].append('svg') 
            configurations["planner_result"].append(svg_result)
            configurations["planner_time"].append(svg_time)
            configurations["planner_cost"].append(svg_cost)

            run_svg_result, run_svg_force, run_svg_time = False, 0., 0.
            if self.RUN_SIM:
                rospy.loginfo(f'Executing SVG path in environment.')
                run_svg_result, run_svg_time, run_svg_force = self.run_trajectory(svg_result, additions)

            configurations["runner"].append('mppi') 
            configurations["runner_result"].append(run_svg_result)
            configurations["runner_force"].append(run_svg_force)
            configurations["runner_time"].append(run_svg_time)

        if rospy.is_shutdown():
            return

        prm_graph, prm_path = None, None
        if self.USE_PRM:
            rospy.loginfo(f'Running PRM global planner on environment.')
            prm_result, prm_graph, prm_time, prm_path, prm_cost = self.run_path_planner(actors, 'prm')

            configurations["ID"].append(f"{name}")
            configurations["room_area"].append(room_area)
            configurations["experiment"].append(1)

            configurations["planner"].append('prm') 
            configurations["planner_result"].append(prm_result)
            configurations["planner_time"].append(prm_time)
            configurations["planner_cost"].append(prm_cost)

            run_prm_result, run_prm_force, run_prm_time = False, 0., 0.
            if self.RUN_SIM:
                rospy.loginfo(f'Executing PRM path in environment.')
                run_prm_result, run_prm_time, run_prm_force = self.run_trajectory(prm_result, additions)

            configurations["runner"].append('mppi') 
            configurations["runner_result"].append(run_prm_result)
            configurations["runner_force"].append(run_prm_force)
            configurations["runner_time"].append(run_prm_time)

        if rospy.is_shutdown():
            return

        rrt_graph, rrt_path = None, None
        if self.USE_RRT:
            rospy.loginfo(f'Running RRT global planner on environment.')
            rrt_result, rrt_graph, rrt_time, rrt_path, rrt_cost = self.run_path_planner(actors, 'rrt')

            configurations["ID"].append(f"{name}")
            configurations["room_area"].append(room_area)
            configurations["experiment"].append(1)

            configurations["planner"].append('rrt') 
            configurations["planner_result"].append(rrt_result)
            configurations["planner_time"].append(rrt_time)
            configurations["planner_cost"].append(rrt_cost)

            run_rrt_result, run_rrt_force, run_rrt_time = False, 0., 0.
            if self.RUN_SIM:
                rospy.loginfo(f'Executing RRT path in environment.')
                run_rrt_result, run_rrt_time, run_rrt_force = self.run_trajectory(rrt_result, additions)

            configurations["runner"].append('mppi') 
            configurations["runner_result"].append(run_rrt_result)
            configurations["runner_force"].append(run_rrt_force)
            configurations["runner_time"].append(run_rrt_time)

        if rospy.is_shutdown():
            return

        if self.SAVE_IMG:
            max_mass = self.gym_world.params['scheduler']['mass_threshold']

            self.save_snapshot_paths(name, max_mass, (x, y), actors, q_init, q_goal, nvg_path, svg_path, prm_path, rrt_path)
            self.save_snapshot_graph(name, max_mass, (x, y), actors, nvg_graph, svg_graph, prm_graph, rrt_graph)
            rospy.loginfo(f'Saved snapshots of the environment and graphs under ID: {name}')

        self.save_result(self.file_path, configurations)
        rospy.loginfo(f'Saved information to: {self.file_path}')

    def reset_robot(self):
        robot_state = self.gym_world.params["environment"]["robot"]["init_state"]
        x, y, yaw = robot_state[0], robot_state[1], robot_state[2] * (np.pi / 180.0)

        self.gym_world.simulation.set_actor_dof_state(torch.tensor([x, 0., y, 0., yaw, 0.], device=self.device))
        self.gym_world.update_objective(np.array([[x, y]]))

    def initiate_world(self, x, y):
        self.gym_world.params['range_x'] = [-x, x]
        self.gym_world.params['range_y'] = [-y, y]

        self.scheduler.nvg_planner.range_x = [-x, x]
        self.scheduler.nvg_planner.range_y = [-y, y]

        self.scheduler.svg_planner.range_x = [-x, x]
        self.scheduler.svg_planner.range_y = [-y, y]

        self.scheduler.prm_planner.range_x = [-x, x]
        self.scheduler.prm_planner.range_y = [-y, y]

        self.scheduler.rrt_planner.range_x = [-x, x]
        self.scheduler.rrt_planner.range_y = [-y, y]

        self.scheduler.robot_goal_pos[0] = 0.
        self.scheduler.robot_goal_pos[1] = y - 1.5

        self.gym_world.params["environment"]["robot"]["init_state"] = [0., - y + .5, 90]
        self.gym_world.params["goal"] = self.scheduler.robot_goal_pos

        additions = self.gym_world.grid_additions()
        actors = [ActorWrapper(**addition) for addition in additions]

        room_area = (2 * x) * (2 * y)

        state_ten = torch.zeros(len(actors), 13)
        for i, actor in enumerate(actors):
            state_ten[i, :3] = torch.tensor(actor.init_pos, device=self.device)
            state_ten[i, 3:7] = torch.tensor(actor.init_ori, device=self.device)

            actor_mass_noise = np.random.uniform(-actor.noise_percentage_mass * actor.mass, actor.noise_percentage_mass * actor.mass)
            actor.mass = actor.mass + actor_mass_noise

            additions[i]['mass'] = actor.mass
 
            print(f'{i}: ', actor.name, actor.mass, actor.init_pos, actor.init_ori, actor.size)

        self.reset_robot()

        return additions, (actors, state_ten), room_area

    def run_path_planner(self, actors, planner_mode):
        self.reset_robot()

        start_time = time.time()
        result, graph, path, cost = self.scheduler.generate_path(
            self.gym_world.get_robot_dofs(), actors, mode=planner_mode)

        exec_time = time.time() - start_time
        return result, graph, exec_time, path, cost

    def run_trajectory(self, path_is_ready, additions):
        self.gym_world.configure(additions=additions, apply_mass_noise=False)

        exec_net_forces = 0.0
        exec_run_result = False
        exec_start_time = time.time()

        while path_is_ready:
            robot_dof = self.gym_world.get_robot_dofs()
            waypoints = self.scheduler.get_next_waypoints(robot_dof)
            if waypoints is not None:
                self.gym_world.update_objective(waypoints)

            _ = self.gym_world.run()

            exec_net_forces += self.gym_world.get_net_forces()

            if self.gym_world.is_goal_reached and self.scheduler.is_finished():
                exec_run_result = True
                break

            if time.time() - exec_start_time > self.MAX_EXEC_DURATION:
                rospy.logwarn(f"Could not finish the run within {self.MAX_EXEC_DURATION / 60} min")
                break

        exec_time = time.time() - exec_start_time
        return exec_run_result, exec_time, exec_net_forces

    def show_snapshot_environment(self):
        _, axs = plt.subplots(1, 3)
        
        for i, ax in enumerate(axs.flatten()):
            _, actors, _ = self.initiate_world(self.DIMENSION_ROOM_X, self.DIMENSION_ROOM_Y)
            self.reset_robot()

            max_mass = self.gym_world.params['scheduler']['mass_threshold']
            robot_dof = self.gym_world.get_robot_dofs()

            q_init = [robot_dof[0], robot_dof[2], 0]
            q_goal = self.scheduler.robot_goal_pos

            for actor, state in zip(*actors):
                print(actor.name, actor.mass, actor.init_pos, actor.init_ori, actor.size)

                mass = actor.mass
                size = [dim - 1e-3 for dim in actor.size]

                obs_pos = state[:2]
                obs_rot = Experiment1.quaternion_to_yaw(state[3:7])

                corners = [
                    (obs_pos[0] - size[0] / 2, obs_pos[1] - size[1] / 2),
                    (obs_pos[0] + size[0] / 2, obs_pos[1] - size[1] / 2),
                    (obs_pos[0] + size[0] / 2, obs_pos[1] + size[1] / 2),
                    (obs_pos[0] - size[0] / 2, obs_pos[1] + size[1] / 2)
                ]

                polygon = shapely.Polygon(corners)
                polygon = rotate(polygon, obs_rot, origin=obs_pos, use_radians=True)

                patch_polygon = Polygon(polygon.exterior.coords, closed=True, color=plt.cm.viridis_r(mass / (2 * max_mass)))
                ax.add_patch(patch_polygon)

            ax.scatter(q_init[0], q_init[1], color='navy', marker='p', s=70, zorder=2, label='Start')
            ax.scatter(q_goal[0], q_goal[1], color='crimson', marker='*', s=80, zorder=2, label='Goal')

            ax.set_xlim(-self.DIMENSION_ROOM_X, self.DIMENSION_ROOM_X)
            ax.set_ylim(-self.DIMENSION_ROOM_Y, self.DIMENSION_ROOM_Y)

            ax.set_title(f'Example Room {i + 1}')
            ax.set_xlabel('x-axis')
            ax.set_ylabel('y axis')
            ax.set_aspect('equal')
            ax.legend()

        sm = plt.cm.ScalarMappable(cmap=plt.cm.viridis_r, norm=plt.Normalize(vmin=0, vmax=2*max_mass))
        cbar = plt.colorbar(sm, ax=axs)
        cbar.set_label('Mass')

        cbar.ax.axhline(y=max_mass, color='darkred', linestyle='-', linewidth=2)
        cbar.ax.text(-1.1, max_mass, 'MAX', va='center', ha='left', color='darkred')

        plt.show()

    @staticmethod
    def save_result(path, configurations):
        write_headers = not os.path.exists(path)
        with open(path, 'a', newline='') as file:
            writer = csv.writer(file)

            if write_headers:
                headers = list(configurations.keys())
                writer.writerow(headers)

            amount_of_rows = len(list(configurations.values())[0])
            for i in range(amount_of_rows):
                row = [configurations[key][i] for key in configurations.keys()]
                writer.writerow(row)

    @staticmethod
    def save_snapshot_paths(name, max_mass, limits, actors, q_init, q_goal, nvg_path, svg_path, prm_path, rrt_path):
        fig, ax = plt.subplots(figsize=(20, 15))

        for actor, state in zip(*actors):
            mass = actor.mass
            size = [dim - 1e-3 for dim in actor.size]

            obs_pos = state[:2]
            obs_rot = Experiment1.quaternion_to_yaw(state[3:7])

            corners = [
                (obs_pos[0] - size[0] / 2, obs_pos[1] - size[1] / 2),
                (obs_pos[0] + size[0] / 2, obs_pos[1] - size[1] / 2),
                (obs_pos[0] + size[0] / 2, obs_pos[1] + size[1] / 2),
                (obs_pos[0] - size[0] / 2, obs_pos[1] + size[1] / 2)
            ]

            polygon = shapely.Polygon(corners)
            polygon = rotate(polygon, obs_rot, origin=obs_pos, use_radians=True)

            patch_polygon = Polygon(polygon.exterior.coords, closed=True, color=plt.cm.viridis_r(mass / (2 * max_mass)))
            ax.add_patch(patch_polygon)

        ax.scatter(q_init[0], q_init[1], color='navy', marker='p', s=70, zorder=2, label='Start')
        ax.scatter(q_goal[0], q_goal[1], color='crimson', marker='*', s=80, zorder=2, label='Goal')

        ax.set_xlim(-limits[0], limits[0])
        ax.set_ylim(-limits[1], limits[1])

        sm = plt.cm.ScalarMappable(cmap=plt.cm.viridis_r, norm=plt.Normalize(vmin=0, vmax=max_mass))
        cbar = plt.colorbar(sm, ax=ax)
        cbar.set_label('Mass')

        if nvg_path is not None:
            nvg_path = np.array(nvg_path)
            ax.plot(nvg_path[:, 0], nvg_path[:, 1], color='darkorange',
                    marker='o', markersize=3, label='NVG Path')

        if svg_path is not None:
            svg_path = np.array(svg_path)
            ax.plot(svg_path[:, 0], svg_path[:, 1], color='darkgreen',
                    marker='o', markersize=3, label='SVG Path')

        if prm_path is not None:
            prm_path = np.array(prm_path)
            ax.plot(prm_path[:, 0], prm_path[:, 1], color='darkred',
                    marker='o', markersize=3, label='PRM Path')

        if rrt_path is not None:
            rrt_path = np.array(rrt_path)
            ax.plot(rrt_path[:, 0], rrt_path[:, 1], color='darkblue',
                    marker='o', markersize=3, label='RRT Path')

        ax.set_title('Obstacles and Paths')
        ax.set_xlabel('X Position')
        ax.set_ylabel('Y Position')
        ax.set_aspect('equal')
        ax.legend()

        folder = os.path.join(os.path.expanduser('~'), Experiment1.DATA_FOLDER, 'images')
        os.makedirs(folder, exist_ok=True)

        image_file_path = os.path.join(folder, f'{name}_paths.png')
        fig.savefig(image_file_path)
        plt.close(fig)

    @staticmethod
    def save_snapshot_graph(name, max_mass, limits, actors, nvg_graph, svg_graph, prm_graph, rrt_graph):
        amount_of_subplots = sum([Experiment1.USE_NVG, Experiment1.USE_SVG, Experiment1.USE_PRM, Experiment1.USE_RRT])
        fig, axs = plt.subplots(1, amount_of_subplots, figsize=(20, 15))
        i = 0

        for actor, state in zip(*actors):
            mass = actor.mass
            size = [dim - 1e-3 for dim in actor.size]

            obs_pos = state[:2]
            obs_rot = Experiment1.quaternion_to_yaw(state[3:7])

            corners = [
                (obs_pos[0] - size[0] / 2, obs_pos[1] - size[1] / 2),
                (obs_pos[0] + size[0] / 2, obs_pos[1] - size[1] / 2),
                (obs_pos[0] + size[0] / 2, obs_pos[1] + size[1] / 2),
                (obs_pos[0] - size[0] / 2, obs_pos[1] + size[1] / 2)
            ]

            polygon = shapely.Polygon(corners)
            polygon = rotate(polygon, obs_rot, origin=obs_pos, use_radians=True)

            patch_polygon = Polygon(polygon.exterior.coords, closed=True, color=plt.cm.viridis_r(mass / (2 * max_mass)))
            for ax in axs.flatten():
                ax.add_patch(copy.deepcopy(patch_polygon))

        sm = plt.cm.ScalarMappable(cmap=plt.cm.viridis_r, norm=plt.Normalize(vmin=0, vmax=max_mass))
        cbar = plt.colorbar(sm, ax=axs)
        cbar.set_label('Mass')

        for ax in axs.flatten():
            ax.set_xlim(-limits[0], limits[0])
            ax.set_ylim(-limits[1], limits[1])
            ax.set_aspect('equal')

        if nvg_graph is not None:
            edges_nvg = np.array([(nvg_graph.nodes[u]['pos'], nvg_graph.nodes[v]['pos']) for u, v in nvg_graph.edges])
            for edge_nvg in edges_nvg:
                axs[i].plot(edge_nvg[:, 0], edge_nvg[:, 1], color='orange', linewidth=1.0)
            axs[i].set_title('NVG Graph')
            axs[i].set_xlabel('X Position')
            axs[i].set_ylabel('Y Position')
            i += 1

        if svg_graph is not None:
            edges_svg = np.array([(svg_graph.nodes[u]['pos'], svg_graph.nodes[v]['pos']) for u, v in svg_graph.edges])
            for edge_svg in edges_svg:
                axs[i].plot(edge_svg[:, 0], edge_svg[:, 1], color='forestgreen', linewidth=1.0)
            axs[i].set_title('SVG Graph')
            axs[i].set_xlabel('X Position')
            axs[i].set_ylabel('Y Position')
            i += 1

        if prm_graph is not None:
            edges_prm = np.array([(prm_graph.nodes[u]['pos'], prm_graph.nodes[v]['posshow_snapshot_environment']) for u, v in prm_graph.edges])
            for edge_prm in edges_prm:
                axs[i].plot(edge_prm[:, 0], edge_prm[:, 1], color='tomato', linewidth=1.0)
            axs[i].set_title('PRM Graph')
            axs[i].set_xlabel('X Position')
            axs[i].set_ylabel('Y Position')
            i += 1

        if rrt_graph is not None:
            edges_rrt = np.array([(rrt_graph.nodes[u]['pos'], rrt_graph.nodes[v]['pos']) for u, v in rrt_graph.edges])
            for edge_rrt in edges_rrt:
                axs[i].plot(edge_rrt[:, 0], edge_rrt[:, 1], color='lightblue', linewidth=1.0)
            axs[i].set_title('RRT Graph')
            axs[i].set_xlabel('X Position')
            axs[i].set_ylabel('Y Position')
            i += 1

        folder = os.path.join(os.path.expanduser('~'), Experiment1.DATA_FOLDER, 'images')
        os.makedirs(folder, exist_ok=True)

        image_file_path = os.path.join(folder, f'{name}_graphs.png')
        fig.savefig(image_file_path)
        plt.close(fig)

    @staticmethod
    def quaternion_to_yaw(quaternion):
        return euler_from_quaternion(quaternion)[-1]


if __name__ == "__main__":
    benchmark = Experiment1.create_benchmark_experiment_1()
    benchmark.show_snapshot_environment()
    benchmark.gym_world.destroy()

    rospy.signal_shutdown("Benchmark experiment 1 completed. Shutting down ROS.")
