import csv
import datetime
import math
import os
import rospy

from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from sensor_msgs.msg import JointState
from puma_motor_msgs.msg import MultiFeedback


class Collector:

    def __init__(self):
        rospy.init_node('data_collector', anonymous=True)

        self.vel_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=10)

        rospy.Subscriber('/joint_states', JointState, self.joint_states_callback)
        rospy.Subscriber('/feedback', MultiFeedback, self.feedback_callback)
        rospy.Subscriber('/dingo_velocity_controller/odom', Odometry, self.pose_callback)
        self.data_folder = os.path.join(os.path.expanduser('~'), 'velocity_data')
        os.makedirs(self.data_folder, exist_ok=True)  # Create the data folder

        self.do_monitor = False
        self.start_time = None
        
        self.joint_pos = {"t": [], "fl": [], "fr": [], "rl": [], "rr": []}
        self.joint_vel = {"t": [], "fl": [], "fr": [], "rl": [], "rr": []}
        self.joint_eff = {"t": [], "fl": [], "fr": [], "rl": [], "rr": []}

        self.rob_pose_pos = {"t": [], "x": [], "y": [], "z": []}
        self.rob_pose_rot = {"t": [], "x": [], "y": [], "z": [], "w": []}
        self.rob_twist_lin = {"t": [], "x": [], "y": [], "z": []}
        self.rob_twist_ang = {"t": [], "x": [], "y": [], "z": []}

        self.wheel_cur = {"t": [], "fl": [], "fr": [], "rl": [], "rr": []}
        self.wheel_vol = {"t": [], "fl": [], "fr": [], "rl": [], "rr": []}

        self.data = {
            "joint_pos": self.joint_pos,
            "joint_vel": self.joint_vel,
            "joint_eff": self.joint_eff,
            "rob_pos": self.rob_pose_pos,
            "rob_rot": self.rob_pose_rot,
            "rob_lin_vel": self.rob_twist_lin,
            "rob_ang_vel": self.rob_twist_ang,
            "wheel_cur": self.wheel_cur,
            "wheel_vol": self.wheel_vol
        }

    def joint_states_callback(self, data):
        if self.do_monitor:
            elapsed_time = rospy.get_time() - self.start_time

            # Save joint position
            self.joint_pos["t"].append(elapsed_time)
            self.joint_pos["fl"].append(data.position[0])
            self.joint_pos["fr"].append(data.position[1])
            self.joint_pos["rl"].append(data.position[2])
            self.joint_pos["rr"].append(data.position[3])

            # Save joint velocity
            self.joint_vel["t"].append(elapsed_time)
            self.joint_vel["fl"].append(data.velocity[0])
            self.joint_vel["fr"].append(data.velocity[1])
            self.joint_vel["rl"].append(data.velocity[2])
            self.joint_vel["rr"].append(data.velocity[3])

            # Save joint effort
            self.joint_eff["t"].append(elapsed_time)
            self.joint_eff["fl"].append(data.effort[0])
            self.joint_eff["fr"].append(data.effort[1])
            self.joint_eff["rl"].append(data.effort[2])
            self.joint_eff["rr"].append(data.effort[3])

    def feedback_callback(self, data):
        if self.do_monitor:
            elapsed_time = rospy.get_time() - self.start_time

            # Save current for each wheel
            self.wheel_cur["t"].append(elapsed_time)
            self.wheel_cur["fl"].append(data.drivers_feedback[0].current)
            self.wheel_cur["fr"].append(data.drivers_feedback[1].current)
            self.wheel_cur["rl"].append(data.drivers_feedback[2].current)
            self.wheel_cur["rr"].append(data.drivers_feedback[3].current)

            # Save voltage for each wheel
            self.wheel_vol["t"].append(elapsed_time)
            self.wheel_vol["fl"].append(data.drivers_feedback[0].duty_cycle)
            self.wheel_vol["fr"].append(data.drivers_feedback[1].duty_cycle)
            self.wheel_vol["rl"].append(data.drivers_feedback[2].duty_cycle)
            self.wheel_vol["rr"].append(data.drivers_feedback[3].duty_cycle)

    def pose_callback(self, data):
        if self.do_monitor:
            elapsed_time = rospy.get_time() - self.start_time

            # Save robot pose position
            self.rob_pose_pos["t"].append(elapsed_time)
            self.rob_pose_pos["x"].append(data.pose.pose.position.x)
            self.rob_pose_pos["y"].append(data.pose.pose.position.y)
            self.rob_pose_pos["z"].append(data.pose.pose.position.z)

            # Save robot pose orientation
            self.rob_pose_rot["t"].append(elapsed_time)
            self.rob_pose_rot["x"].append(data.pose.pose.orientation.x)
            self.rob_pose_rot["y"].append(data.pose.pose.orientation.y)
            self.rob_pose_rot["z"].append(data.pose.pose.orientation.z)
            self.rob_pose_rot["w"].append(data.pose.pose.orientation.w)

            # Save robot twist linear velocity
            self.rob_twist_lin["t"].append(elapsed_time)
            self.rob_twist_lin["x"].append(data.twist.twist.linear.x)
            self.rob_twist_lin["y"].append(data.twist.twist.linear.y)
            self.rob_twist_lin["z"].append(data.twist.twist.linear.z)

            # Save robot twist angular velocity
            self.rob_twist_ang["t"].append(elapsed_time)
            self.rob_twist_ang["x"].append(data.twist.twist.angular.x)
            self.rob_twist_ang["y"].append(data.twist.twist.angular.y)
            self.rob_twist_ang["z"].append(data.twist.twist.angular.z)

    def push(self, push_direction_degrees):
        velocity = Twist()

        end_position = None
        self.do_monitor = True
        self.start_time = rospy.get_time()

        push_direction_radians = math.radians(push_direction_degrees)

        velocity.linear.x = 0.4 * math.cos(push_direction_radians)
        velocity.linear.y = 0.4 * math.sin(push_direction_radians)

        while not rospy.is_shutdown():
            self.vel_pub.publish(velocity)
            
            if self.rob_pose_pos["x"] and not end_position:
                end_position = self.rob_pose_pos["x"][-1] + 3.0 

            if self.rob_pose_pos["x"] and end_position < self.rob_pose_pos["x"][-1]:
                break

        self.do_monitor = False

    def save_data(self, angle, mass, folder):
        angle_folder = os.path.join(folder, str(angle))
        os.makedirs(angle_folder, exist_ok=True)

        file_name = f"{mass}.csv"
        file_path = os.path.join(angle_folder, file_name)

        with open(file_path, 'w', newline='') as file:
            writer = csv.writer(file)

            writer.writerow(list(self.data.keys()))

            max_length = max(len(data["t"]) for data in self.data.values())

            for i in range(max_length):
                row = []

                for data_dict in self.data.values():
                    for key in data_dict.keys():
                        if i < len(data_dict["t"]):
                            row.append(data_dict[key][i])
                        else:
                            row.append("")

                writer.writerow(row)

        for data_dict in self.data.values():
            for key in data_dict.keys():
                data_dict[key] = []

    def run(self):
        use_save = self.request_saving()

        if use_save:
            experiment_name = self.request_name()
            current_datetime = datetime.datetime.now().strftime("%Y-%m-%d")
            datetime_folder = os.path.join(self.data_folder, f"{current_datetime}_{experiment_name}")

            os.makedirs(datetime_folder, exist_ok=True)

        push_direction_degrees = self.request_direction()

        runs = self.request_runs()
        for _ in range(runs):
            mass = self.request_mass()

            self.push(push_direction_degrees)

            if use_save:
                self.save_data(push_direction_degrees, mass, datetime_folder)
            
    @staticmethod
    def request_saving():
        while True:
            do_save = input("Save data of robot actions? ")

            if do_save == "yes":
                rospy.loginfo("Saving data is turned on.")
                return True
            elif do_save == "no":
                rospy.loginfo("Saving data is turned off.")
                return False
            else:
                rospy.logerr("Invalid input. Please enter yes/no.")

    @staticmethod
    def request_name():
        name = input("Please enter unique name for this experiment: ")
        return name

    @staticmethod
    def request_direction():
        while True:
            try:
                degrees = int(input("Please enter the push direction (0 - 360) degrees: "))
                if 0 <= degrees <= 360:
                    rospy.loginfo(f"Push degrees is set to {degrees}.")
                    return degrees
                rospy.logerr("Invalid input. Please enter (0 - 360) degrees.")
            except ValueError:
                rospy.logerr("Invalid input. Please enter a valid integer.")

    @staticmethod
    def request_mass():
        while True:
            try:
                mass = float(input("Please enter the mass of the pushed object (0 - 100) kg: "))
                return mass
            except ValueError:
                rospy.logerr("Invalid input. Please enter a valid number.")

    @staticmethod
    def request_runs():
        while True:
            try:
                runs = int(input("Please enter the amount of runs (0 - 100): "))
                if 0 <= runs <= 100:
                    return runs
                rospy.logerr("Invalid input. Please enter a number between 1 and 100.")
            except ValueError:
                rospy.logerr("Invalid input. Please enter a valid integer.")

if __name__ == "__main__":
    collector = Collector()
    collector.run()
