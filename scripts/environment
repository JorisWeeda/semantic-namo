#!/usr/bin/env python3
import os
os.environ['APPDATA'] = ""

import hydra
import rospy
import random
import time
import pandasgui

import numpy as np

from environment import SimulateWorld, PhysicalWorld
from scheduler import Scheduler
from monitor import Monitor


if __name__ == "__main__":
    rospy.init_node('environment', anonymous=True)
    
    is_simulation = rospy.get_param('~is_simulation')
    robot_name = rospy.get_param('~robot_name') 
    config = rospy.get_param('~config')
    layout = rospy.get_param('~layout')

    hydra.initialize(config_path="../config", version_base=None)
    hydra_config = hydra.compose(config)
    
    monitor = Monitor(is_simulation)

    if is_simulation:
        rospy.loginfo(f'Running simulate world with configuration: {config} and world: {layout}')
        world = SimulateWorld.build(hydra_config, layout)
        monitor.configure_simulate_monitor(world.simulation)
    else:
        rospy.loginfo(f'Running physical world with configuration: {config} and world: {layout}')
        world = PhysicalWorld.build(hydra_config, layout, robot_name)
        monitor.configure_physical_monitor(robot_name)

    scheduler = Scheduler.create_scheduler(layout)

    start_time = time.time()
    set_command = True

    monitor.start_monitoring()
    while not rospy.is_shutdown():
        loop_start_time = time.time()

        if (time.time() - start_time >= 5) and world.is_goal_reached and set_command:
            # scheduler.generate_path(world.simulation)

            random_x = random.uniform(0, 1.5)
            random_y = random.uniform(-1.5, 1.5)
            random_yaw = random.uniform(-np.pi, np.pi)

            goal = np.array([0., 0., 0.])
            mode = np.array([0., 0.])

            world.update_objective(goal, mode)
            set_command = False

        action = world.run()

        monitor.step_monitoring()

        if is_simulation and action is not None:
            monitor.cb_simulate(world.simulation, action.numpy())

        if (time.time() - start_time >= 20) and world.is_goal_reached:
            break

    if is_simulation:
        world.destroy()

    monitor.stop_monitoring()

    pandasgui.show(**monitor.data)

    monitor.request_save()