#!/usr/bin/env python3

import os
os.environ['APPDATA'] = ""

import hydra
import rospy
import time
import pandasgui
import numpy as np

from isaacgym import gymapi

from environment import SimulateWorld, PhysicalWorld
from scheduler import Scheduler
from monitor import Dashboard, Monitor


if __name__ == "__main__":
    rospy.init_node('environment', anonymous=True)

    is_simulation = rospy.get_param('~is_simulation')

    use_dashboard = rospy.get_param('~use_dashboard')
    use_viewer = rospy.get_param('~use_viewer')
    robot_name = rospy.get_param('~robot_name') 

    config = rospy.get_param('~config')
    layout = rospy.get_param('~layout')

    hydra.initialize(config_path="../config", version_base=None)
    hydra_config = hydra.compose(config)
    
    monitor = Monitor(is_simulation)

    if is_simulation:
        rospy.loginfo(f'Running simulate world with configuration: {config} and world: {layout}')
        world = SimulateWorld.build(hydra_config, layout, use_viewer)
        monitor.configure_simulate_monitor(world.simulation)
    else:
        rospy.loginfo(f'Running physical world with configuration: {config} and world: {layout}')
        world = PhysicalWorld.build(hydra_config, layout, robot_name)
        monitor.configure_physical_monitor(robot_name)

    scheduler = Scheduler.create_scheduler(layout)
    dashboard = Dashboard.create_dashboard(layout)

    monitor.start_monitoring()

    rate = rospy.Rate(1 / world.config['isaacgym']['dt'])

    start_time = time.time()
    while not rospy.is_shutdown():
        loop_start_time = time.time()

        if (time.time() - start_time >= 2) and scheduler.path is None:
            robot_dof, actors = world.get_robot_dofs(), world.get_actor_states()
            res, graph, path, _ = scheduler.generate_path(robot_dof, actors, mode='nvg')
            if res:
                dashboard.update_planning(actors, path, graph)

        if world.is_goal_reached and scheduler.path is not None:
            waypoint = scheduler.get_next_waypoint()
            if waypoint is not None:
                goal = [waypoint[0], waypoint[1] , np.pi/2]
                world.update_objective(goal)
    
        action = world.run()

        monitor.step_monitoring()

        if is_simulation and action is not None:
            monitor.cb_simulate(world.simulation, action.numpy())

        if scheduler.is_finished() and world.is_goal_reached:
            break

        if (time.time() - loop_start_time) > (1.0 / rate.sleep_dur.to_sec()):
            rospy.logwarn(f"Loop rate frequency not met.")

    if is_simulation:
        world.destroy()

    dashboard.destroy()

    monitor.stop_monitoring()

    pandasgui.show(**monitor.data)

    monitor.request_save()