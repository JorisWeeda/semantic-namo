#!/usr/bin/env python3
import os
os.environ['APPDATA'] = ""

import io
import hydra
import random
import rospy
import time
import pandasgui

from environment import SimulateWorld, PhysicalWorld
from monitor import Monitor

import torch


def torch_to_bytes(t: torch.Tensor) -> bytes:
    buff = io.BytesIO()
    torch.save(t, buff)
    buff.seek(0)
    return buff.read()


if __name__ == "__main__":
    rospy.init_node('environment', anonymous=True)
    
    is_simulation = rospy.get_param('~is_simulation')
    robot_name = rospy.get_param('~robot_name') 
    config = rospy.get_param('~config')
    layout = rospy.get_param('~layout')

    hydra.initialize(config_path="../config", version_base=None)
    hydra_config = hydra.compose(config)
    
    monitor = Monitor(is_simulation)

    if is_simulation:
        rospy.loginfo(f'Running simulate world with configuration: {config} and world: {layout}')
        world = SimulateWorld.build(hydra_config, layout)
        monitor.configure_simulate_monitor()
    else:
        rospy.loginfo(f'Running physical world with configuration: {config} and world: {layout}')
        world = PhysicalWorld.build(hydra_config, layout, robot_name)
        monitor.configure_physical_monitor(robot_name)

    start_time = time.time()
    set_command = True

    monitor.start_monitoring()
    while not rospy.is_shutdown():
        iteration_start_time = time.time()

        if (time.time() - start_time >= 5) and set_command:
            goal = torch.tensor([0.5, 0., 0., 0., 0., 0., 1.])
            goal = torch_to_bytes(goal)

            world.controller.update_objective_goal(goal)
            world.is_goal_reached = False

            random_x = random.uniform(-2, 2)
            random_y = random.uniform(-2, 2)
            set_command = False

        action = world.run()

        if is_simulation and action is not None:
            monitor.cb_simulate(world.simulation, action)

        if (time.time() - start_time >= 30):
            break

    if is_simulation:
        world.destroy()

    monitor.stop_monitoring()

    pandasgui.show(**monitor.data)

    monitor.request_save()