#!/usr/bin/env python3
from isaacgym import gymapi

import numpy as np
import time
import rospy
import hydra
import os

from monitor import Dashboard, Monitor
from scheduler import Scheduler
from environment import SimulateWorld, PhysicalWorld


os.environ['APPDATA'] = ""


if __name__ == "__main__":
    rospy.init_node('environment', anonymous=True)

    is_simulation = rospy.get_param('~is_simulation')

    use_dashboard = rospy.get_param('~use_dashboard')
    use_viewer = rospy.get_param('~use_viewer')
    robot_name = rospy.get_param('~robot_name')

    config = rospy.get_param('~config')
    layout = rospy.get_param('~layout')

    hydra.initialize(config_path="../config", version_base=None)
    hydra_config = hydra.compose(config)

    monitor = Monitor(is_simulation)

    if is_simulation:
        rospy.loginfo(f'Running simulate world with configuration: {config} and world: {layout}')
        world = SimulateWorld.build(hydra_config, layout, use_viewer)
        monitor.configure_simulate_monitor(world.simulation)
    else:
        rospy.loginfo(f'Running physical world with configuration: {config} and world: {layout}')
        world = PhysicalWorld.build(hydra_config, layout, robot_name)
        monitor.configure_physical_monitor(robot_name)

    scheduler = Scheduler.create_scheduler(layout)
    dashboard = Dashboard.create_dashboard(layout)

    monitor.start_monitoring()

    rate = rospy.Rate(1 / world.config['isaacgym']['dt'])

    replanning = False
    start_time = time.time()
    while not rospy.is_shutdown():
        loop_start_time = time.time()

        if (time.time() - start_time >= 2) and scheduler.waypoints is None:
            robot_dof, actors = world.get_robot_dofs(), world.get_actor_states()
            res, graph, waypoints, _ = scheduler.generate_path(robot_dof, actors, mode='svg')
            if res:
                dashboard.update_planning(actors, waypoints, graph)

        if replanning:
            robot_dof, actors = world.get_robot_dofs(), world.get_actor_states()
            res, graph, waypoints, _ = scheduler.generate_path(robot_dof, actors, mode='svg')
            replanning = False        
            if res:
                dashboard.update_planning(actors, waypoints, graph)

        robot_dof = world.get_robot_dofs()
        waypoints = scheduler.get_next_waypoints(robot_dof)
        if waypoints is not None:
            world.update_objective(waypoints)

        action, replanning = world.run()
        monitor.step_monitoring()

        print(f'robot_dof: {robot_dof[1], robot_dof[3], robot_dof[5]}')

        if world.is_finished() and scheduler.is_finished():
            break

        if is_simulation and action is not None:
            monitor.cb_simulate(world.simulation, action.cpu().numpy())

        if (time.time() - loop_start_time) > (1.0 / rate.sleep_dur.to_sec()):
            rospy.logwarn("Loop rate frequency not met.")

    if is_simulation:
        world.destroy()

    dashboard.destroy()

    monitor.stop_monitoring()

    # pandasgui.show(**monitor.data)

    # monitor.request_save()
